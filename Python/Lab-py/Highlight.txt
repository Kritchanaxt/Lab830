
สรุปสั้น ๆ ของฟังก์ชันและฟังก์ชันในตัวเหล่านี้ใน Python หวังว่าจะเป็นประโยชน์

1. reduce:
    - ฟังก์ชันจาก `functools` ใช้ในการลดรายการเป็นค่าเดียวโดยใช้ฟังก์ชันที่ให้
    - ตัวอย่าง: `reduce(lambda x, y: x + y, [1, 2, 3, 4])` จะให้ผลลัพธ์เป็น 10

2. sum:
    - ใช้ในการหาผลรวมของรายการหรือ iterable อื่น ๆ
    - ตัวอย่าง: `sum([1, 2, 3, 4])` จะให้ผลลัพธ์เป็น 10

3. ord:
    - ให้ค่าตัวเลข ASCII ของตัวอักษรที่ให้
    - ตัวอย่าง: `ord('a')` จะให้ผลลัพธ์เป็น 97

4. cmp:
    - ใช้ในการเปรียบเทียบค่าสองค่า (มีใน Python 2 เท่านั้น)
    - ตัวอย่าง: `cmp(1, 2)` จะให้ผลลัพธ์เป็น -1 (ใน Python 3 ใช้ `__lt__`, `__eq__` และอื่น ๆ แทน)

5. max:
    - ให้ค่ามากที่สุดจากรายการหรือ iterable
    - ตัวอย่าง: `max([1, 2, 3, 4])` จะให้ผลลัพธ์เป็น 4

6. min:
    - ให้ค่าน้อยที่สุดจากรายการหรือ iterable
    - ตัวอย่าง: `min([1, 2, 3, 4])` จะให้ผลลัพธ์เป็น 1

7. all:
    - คืนค่า True ถ้าทุกค่าใน iterable เป็นจริง (True)
    - ตัวอย่าง: `all([True, True, True])` จะให้ผลลัพธ์เป็น True

8. any:
    - คืนค่า True ถ้ามีค่าใดใน iterable เป็นจริง (True)
    - ตัวอย่าง: `any([False, True, False])` จะให้ผลลัพธ์เป็น True

9. len:
    - คืนค่าความยาวของ iterable
    - ตัวอย่าง: `len([1, 2, 3, 4])` จะให้ผลลัพธ์เป็น 4

10. enumerate:
    - คืนค่า iterable ที่ประกอบด้วยคู่ของ index และค่าจาก iterable ที่ให้
    - ตัวอย่าง: `list(enumerate(['a', 'b', 'c']))` จะให้ผลลัพธ์เป็น `[(0, 'a'), (1, 'b'), (2, 'c')]`

11. accumulate:
    - ฟังก์ชันจาก `itertools` ใช้ในการสะสมค่าจาก iterable
    - ตัวอย่าง: `list(accumulate([1, 2, 3, 4]))` จะให้ผลลัพธ์เป็น `[1, 3, 6, 10]`

12. filter:
    - คืนค่า iterator ที่ประกอบด้วยค่าที่ฟังก์ชันให้คืนค่า True
    - ตัวอย่าง: `list(filter(lambda x: x > 2, [1, 2, 3, 4]))` จะให้ผลลัพธ์เป็น `[3, 4]`

13. map:
    - คืนค่า iterator ที่แต่ละค่าถูกปรับเปลี่ยนโดยฟังก์ชันที่ให้
    - ตัวอย่าง: `list(map(lambda x: x * 2, [1, 2, 3, 4]))` จะให้ผลลัพธ์เป็น `[2, 4, 6, 8]`

14. remove: 
    - ลบค่าตัวแรกที่พบในรายการที่ตรงกับค่าที่ระบุ
    - ตัวอย่าง: `my_list.remove(2)`

15. pop:
    - ลบและคืนค่าตัวสุดท้ายของรายการ หรือค่าที่ตำแหน่งที่ระบุ
    - ตัวอย่าง: `value = my_list.pop()` หรือ `value = my_list.pop(1)`

16. del:
    - ลบค่าที่ตำแหน่งที่ระบุ หรือลบรายการทั้งหมด
    - ตัวอย่าง: `del my_list[1]` หรือ `del my_list`

17. append:
    - เพิ่มค่าเข้าไปที่ท้ายรายการ
    - ตัวอย่าง: `my_list.append(5)`

18. insert: 
    - แทรกค่าที่ตำแหน่งที่ระบุ
    - ตัวอย่าง: `my_list.insert(1, 5)`

